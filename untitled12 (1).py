# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yqd06a1Xx0r_vjHS2qSV5HQVVhKolWh9
"""

!pip install google.generativeai

import google.generativeai as genai
import json

class GeminiChecker:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')

    def check_text(self, text):
        prompt = f"""
        Vous êtes un assistant qui aide à améliorer les textes en fournissant des corrections grammaticales, des suggestions de style, des ajustements de ton, et des suggestions générales. Voici quelques exemples de corrections et suggestions :

        1. Correction grammaticale:
           Texte: "Il va au marché pour acheter des pomme."
           Correction: {{"corrections": [{{"erreur": "pomme", "correction": "pommes", "type": "orthographe"}}]}}

        2. Suggestion de style (lisibilité):
           Texte: "Le rapport était long et difficile à comprendre."
           Suggestion: {{"suggestions": [{{"original": "long et difficile à comprendre", "suggestion": "complexe et peu clair", "type": "lisibilité"}}]}}

        3. Ajustement de ton:
           Texte: "Je pense que vous avez tort."
           Ajustement: {{"ajustements": [{{"original": "vous avez tort", "ajustement": "il semble y avoir une erreur", "type": "ton"}}]}}

        4. Suggestion générale:
           Texte: "Le projet est bien mais pourrait être amélioré."
           Suggestion: {{"suggestions": [{{"original": "pourrait être amélioré", "suggestion": "pourrait bénéficier de quelques améliorations", "type": "général"}}]}}

        Analyse le texte suivant et retourne les corrections et suggestions en JSON:
        "{text}"

        Format: {{
            "corrections": [
                {{"erreur": "mot_incorrect",
                  "correction": "suggestion",
                  "type": "orthographe/grammaire"}}
            ],
            "suggestions": [
                {{"original": "texte_original",
                  "suggestion": "suggestion_améliorée",
                  "type": "lisibilité/consistance"}}
            ],
            "ajustements": [
                {{"original": "texte_original",
                  "ajustement": "texte_ajusté",
                  "type": "ton"}}
            ],
            "suggestions_generales": [
                {{"original": "texte_original",
                  "suggestion": "suggestion_améliorée",
                  "type": "général"}}
            ]
        }}
        """

        try:
            response = self.model.generate_content(prompt)
            return json.loads(response.text)
        except Exception as e:
            return {"error": str(e)}

# Utilisation
API_KEY = "AIzaSyCQ0s9dMKCyRJThcGUCS1prpIwtN9hBlMA"  # Remplacez par votre clé
checker = GeminiChecker(API_KEY)

def verify_text():
    while True:
        text = input("\nTexte à corriger (q pour quitter): ")
        if text.lower() == 'q':
            break

        results = checker.check_text(text)
        if "corrections" in results or "suggestions" in results or "ajustements" in results or "suggestions_generales" in results:
            if "corrections" in results:
                print("\nCorrections grammaticales:")
                for corr in results["corrections"]:
                    print(f"Erreur: {corr['erreur']}")
                    print(f"Correction: {corr['correction']}")
                    print(f"Type: {corr['type']}")
            if "suggestions" in results:
                print("\nSuggestions de style:")
                for sugg in results["suggestions"]:
                    print(f"Original: {sugg['original']}")
                    print(f"Suggestion: {sugg['suggestion']}")
                    print(f"Type: {sugg['type']}")
            if "ajustements" in results:
                print("\nAjustements de ton:")
                for adj in results["ajustements"]:
                    print(f"Original: {adj['original']}")
                    print(f"Ajustement: {adj['ajustement']}")
                    print(f"Type: {adj['type']}")
            if "suggestions_generales" in results:
                print("\nSuggestions générales:")
                for sugg in results["suggestions_generales"]:
                    print(f"Original: {sugg['original']}")
                    print(f"Suggestion: {sugg['suggestion']}")
                    print(f"Type: {sugg['type']}")
        else:
            print("Erreur:", results.get("error", "Erreur inconnue"))

verify_text()

